{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/LinkRealVerifiedEntities.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract LinkRealVerifiedEntities is Pausable, AccessControl {\n\tbytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\tbytes32 public constant OWNERSHIP_VERIFIER_ROLE =\n\t\tkeccak256(\"OWNERSHIP_VERIFIER_ROLE\");\n\tbytes32 public constant GUARANTOR_ROLE = keccak256(\"GUARANTOR_ROLE\");\n\n\tstruct OwnershipVeriferData {\n\t\taddress verifierAddress;\n\t\tstring ownershipVerifierName;\n\t\tstring ownershipVerifierPublicURL;\n\t}\n\taddress[] public ownershipVerifiers;\n\n\tstruct GuarantorData {\n\t\taddress guarantorAddress;\n\t\tstring guarantorName;\n\t\tstring guarantorPublicURL;\n\t}\n\taddress[] public guarantors;\n\n\tOwnershipVeriferData[] public ownershipVerifierDataArray; // TODO: remove reduntant data storage onchain and fetch via offchain DS\n\tGuarantorData[] public guarantorDataArray; // TODO: remove reduntant data storage onchain and fetch via offchain DS\n\n\tmapping(address => OwnershipVeriferData) public ownershipVerifierData; // verifierAddress => OwnershipVeriferData\n\tmapping(address => GuarantorData) public guarantorData; // guarantorAddress => GuarantorData\n\n\tstruct PropertyOwnershipVerificationRequest {\n\t\taddress propertyOwner;\n\t\tuint propertyId;\n\t\taddress requestedVerifier;\n\t\tbool isApproved;\n\t}\n\tstruct PropertyGuaranteeRequest {\n\t\taddress propertyOwner;\n\t\tuint propertyId;\n\t\taddress requestedGuarantor;\n\t\tbool isApproved;\n\t}\n\n\tmapping(address => PropertyOwnershipVerificationRequest[])\n\t\tprivate _ownershipVerificationRequestsByVerifier; // verifierAddress => PropertyOwnershipVerificationRequest[]\n\tmapping(address => PropertyGuaranteeRequest[])\n\t\tprivate _guaranteeRequestsByGuarantor; // guarantorAddress => PropertyGuaranteeRequest[]\n\n\t// mapping(address => mapping(address => uint[])) public ownershipVerificationRequests; // verifer[propertyOwner] => propertyIds\n\t// mapping(address => mapping(address => uint[])) public guaranteeRequests; // guarantor[propertyOwner] => propertyIds\n\n\tevent OwnershipVerifierDataAdded(\n\t\taddress indexed verifierAddress,\n\t\tstring verifierName,\n\t\tstring verifierPublicURL\n\t);\n\tevent GuarantorDataAdded(\n\t\taddress indexed guarantorAddress,\n\t\tstring guarantorName,\n\t\tstring guarantorPublicURL\n\t);\n\n\tconstructor(address defaultAdmin, address pauser) {\n\t\t_grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\n\t\t_grantRole(PAUSER_ROLE, pauser);\n\t}\n\n\tfunction isOwnershipVerifier(\n\t\taddress verifierAddress\n\t) public view returns (bool) {\n\t\treturn\n\t\t\tbytes(ownershipVerifierData[verifierAddress].ownershipVerifierName)\n\t\t\t\t.length != 0;\n\t}\n\n\tfunction isGuarantor(address guarantorAddress) public view returns (bool) {\n\t\treturn bytes(guarantorData[guarantorAddress].guarantorName).length != 0;\n\t}\n\n\tfunction returnOwnershipVeriferStructs()\n\t\tpublic\n\t\tview\n\t\treturns (OwnershipVeriferData[] memory)\n\t{\n\t\treturn ownershipVerifierDataArray;\n\t}\n\n\tfunction returnGuarantorStructs()\n\t\tpublic\n\t\tview\n\t\treturns (GuarantorData[] memory)\n\t{\n\t\treturn guarantorDataArray;\n\t}\n\n\tfunction ownershipVerificationRequestsByVerifier(\n\t\taddress verifierAddress\n\t) public view returns (PropertyOwnershipVerificationRequest[] memory) {\n\t\treturn _ownershipVerificationRequestsByVerifier[verifierAddress];\n\t}\n\n\tfunction guaranteeRequestsByGuarantor(\n\t\taddress guarantorAddress\n\t) public view returns (PropertyGuaranteeRequest[] memory) {\n\t\treturn _guaranteeRequestsByGuarantor[guarantorAddress];\n\t}\n\n\t/**\n\t * @dev This requesting ownership verification can be done via this function or off-chain logic\n\t */\n\tfunction requestOwnershipVerification(\n\t\taddress propertyOwner,\n\t\tuint propertyId,\n\t\taddress requestedVerifier\n\t) public {\n\t\trequire(isOwnershipVerifier(requestedVerifier), \"Invalid verifier\");\n\t\t// save ownership verification request\n\t\t_ownershipVerificationRequestsByVerifier[requestedVerifier].push(\n\t\t\tPropertyOwnershipVerificationRequest(\n\t\t\t\tpropertyOwner,\n\t\t\t\tpropertyId,\n\t\t\t\trequestedVerifier,\n\t\t\t\tfalse\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev This requesting guarantee can be done via this function or off-chain logic\n\t */\n\tfunction requestGuarantee(\n\t\taddress propertyOwner,\n\t\tuint propertyId,\n\t\taddress requestedGuarantor\n\t) public {\n\t\trequire(isGuarantor(requestedGuarantor), \"Invalid guarantor\");\n\t\t// save guarantee request\n\t\t_guaranteeRequestsByGuarantor[requestedGuarantor].push(\n\t\t\tPropertyGuaranteeRequest(\n\t\t\t\tpropertyOwner,\n\t\t\t\tpropertyId,\n\t\t\t\trequestedGuarantor,\n\t\t\t\tfalse\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev This function just used temporaily to get request status to frontend via one function call. Request status should be either stored off chain or fetch from PropertyData onchain\n\t */\n\tfunction approveOwnershipVerificationRequest(\n\t\taddress propertyOwner,\n\t\tuint propertyId\n\t) public onlyRole(OWNERSHIP_VERIFIER_ROLE) {\n\t\tPropertyOwnershipVerificationRequest[]\n\t\t\tstorage requests = _ownershipVerificationRequestsByVerifier[\n\t\t\t\tmsg.sender\n\t\t\t];\n\t\tfor (uint i = 0; i < requests.length; i++) {\n\t\t\tif (\n\t\t\t\trequests[i].propertyOwner == propertyOwner &&\n\t\t\t\trequests[i].propertyId == propertyId\n\t\t\t) {\n\t\t\t\trequests[i].isApproved = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @dev This function just used temporaily to get request status to frontend via one function call.\n\t */\n\tfunction approveGuaranteeRequest(\n\t\taddress propertyOwner,\n\t\tuint propertyId\n\t) public onlyRole(GUARANTOR_ROLE) {\n\t\tPropertyGuaranteeRequest[]\n\t\t\tstorage requests = _guaranteeRequestsByGuarantor[msg.sender];\n\t\tfor (uint i = 0; i < requests.length; i++) {\n\t\t\tif (\n\t\t\t\trequests[i].propertyOwner == propertyOwner &&\n\t\t\t\trequests[i].propertyId == propertyId\n\t\t\t) {\n\t\t\t\trequests[i].isApproved = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction setOwnershipVerifierData(\n\t\taddress verifierAddress,\n\t\tstring memory verifierName,\n\t\tstring memory verifierPublicURL\n\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\tOwnershipVeriferData memory _verifierData = OwnershipVeriferData(\n\t\t\tverifierAddress,\n\t\t\tverifierName,\n\t\t\tverifierPublicURL\n\t\t);\n\t\townershipVerifierData[verifierAddress] = _verifierData;\n\t\townershipVerifiers.push(verifierAddress);\n\t\townershipVerifierDataArray.push(_verifierData);\n\t\t_grantRole(OWNERSHIP_VERIFIER_ROLE, verifierAddress);\n\t\temit OwnershipVerifierDataAdded(\n\t\t\tverifierAddress,\n\t\t\tverifierName,\n\t\t\tverifierPublicURL\n\t\t);\n\t}\n\n\tfunction setGuarantorData(\n\t\taddress guarantorAddress,\n\t\tstring memory guarantorName,\n\t\tstring memory guarantorPublicURL\n\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\tGuarantorData memory _guarantorData = GuarantorData(\n\t\t\tguarantorAddress,\n\t\t\tguarantorName,\n\t\t\tguarantorPublicURL\n\t\t);\n\t\tguarantorData[guarantorAddress] = _guarantorData;\n\t\tguarantors.push(guarantorAddress);\n\t\tguarantorDataArray.push(_guarantorData);\n\t\t_grantRole(GUARANTOR_ROLE, guarantorAddress);\n\t\temit GuarantorDataAdded(\n\t\t\tguarantorAddress,\n\t\t\tguarantorName,\n\t\t\tguarantorPublicURL\n\t\t);\n\t}\n\n\tfunction pause() public onlyRole(PAUSER_ROLE) {\n\t\t_pause();\n\t}\n\n\tfunction unpause() public onlyRole(PAUSER_ROLE) {\n\t\t_unpause();\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}